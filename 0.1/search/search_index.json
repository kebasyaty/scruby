{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Scruby","text":"<p>A fast key-value storage library.</p> <p>Scruby is a fast key-value storage library that provides an ordered mapping from string keys to string values. The library uses fractal-tree addressing.</p> <p>The maximum size of the database is 16**32=340282366920938463463374607431768211456 branches, each branch can store one or more keys.</p> <p>The value of any key can be obtained in 32 steps, thereby achieving high performance. There is no need to iterate through all the keys in search of the desired value.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>uv add scruby\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>import anyio\nfrom scruby import Scruby\n\n\nasync def main() -&gt; None:\n    \"\"\"Example.\"\"\"\n\n    db = Scruby()\n    await db.set_key(\"key name\", \"Some text\")\n    await db.get_key(\"key name\")  # =&gt; \"Some text\"\n    await db.get_key(\"key missing\")  # =&gt; KeyError\n    await db.has_key(\"key name\")  # =&gt; True\n    await db.has_key(\"key missing\")  # =&gt; False\n    await db.delete_key(\"key name\")\n    await db.delete_key(\"key missing\")  # =&gt; KeyError\n    # Full database deletion.\n    await db.napalm()\n    await db.napalm()  # =&gt; FileNotFoundError\n\n\nif __name__ == \"__main__\":\n    anyio.run(main)\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<p>View the list of requirements.</p>"},{"location":"#changelog","title":"Changelog","text":"<p>View the change history.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT.</p>"},{"location":"pages/db/","title":"Details","text":"<p>Creation and management of the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from scruby import Scruby\n&gt;&gt;&gt; db = Scruby()\n&gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\nNone\n&gt;&gt;&gt; await db.get_key(\"key name\")\n\"Some text\"\n&gt;&gt;&gt; await db.has_key(\"key name\")\nTrue\n&gt;&gt;&gt; await db.delete_key(\"key name\")\nNone\n&gt;&gt;&gt; await db.napalm()\nNone\n</code></pre>"},{"location":"pages/db/#scruby.db.Scruby","title":"<code>Scruby</code>","text":"<p>Creation and management of the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from scruby import Scruby\n&gt;&gt;&gt; db = Scruby()\n&gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\nNone\n&gt;&gt;&gt; await db.get_key(\"key name\")\n\"Some text\"\n&gt;&gt;&gt; await db.has_key(\"key name\")\nTrue\n&gt;&gt;&gt; await db.delete_key(\"key name\")\nNone\n&gt;&gt;&gt; await db.napalm()\nNone\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>db_path</code> <code>str</code> <p>Path to root directory of databases. Defaule by = \"ScrubyDB\" (in root of project)</p> <code>'ScrubyDB'</code> Source code in <code>src\\scruby\\db.py</code> <pre><code>class Scruby:\n    \"\"\"Creation and management of the database.\n\n    Examples:\n        &gt;&gt;&gt; from scruby import Scruby\n        &gt;&gt;&gt; db = Scruby()\n        &gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\n        None\n        &gt;&gt;&gt; await db.get_key(\"key name\")\n        \"Some text\"\n        &gt;&gt;&gt; await db.has_key(\"key name\")\n        True\n        &gt;&gt;&gt; await db.delete_key(\"key name\")\n        None\n        &gt;&gt;&gt; await db.napalm()\n        None\n\n    Args:\n        db_path: Path to root directory of databases. Defaule by = \"ScrubyDB\" (in root of project)\n    \"\"\"\n\n    def __init__(  # noqa: D107\n        self,\n        db_path: str = \"ScrubyDB\",\n    ) -&gt; None:\n        super().__init__()\n        self.__db_path = db_path\n\n    @property\n    def db_path(self) -&gt; str:\n        \"\"\"Get database name.\"\"\"\n        return self.__db_path\n\n    async def get_leaf_path(self, key: str) -&gt; Path:\n        \"\"\"Get the path to the database cell by key.\n\n        Args:\n            key: Key name.\n        \"\"\"\n        # Key to md5 sum.\n        key_md5: str = hashlib.md5(key.encode(\"utf-8\")).hexdigest()  # noqa: S324\n        # Convert md5 sum in the segment of path.\n        segment_path_md5: str = \"/\".join(list(key_md5))\n        # The path of the branch to the database.\n        branch_path: Path = Path(\n            *(self.__db_path, segment_path_md5),\n        )\n        # If the branch does not exist, need to create it.\n        if not await branch_path.exists():\n            await branch_path.mkdir(parents=True)\n        # The path to the database cell.\n        leaf_path: Path = Path(*(branch_path, \"leaf.json\"))\n        return leaf_path\n\n    async def set_key(\n        self,\n        key: str,\n        value: ValueOfKey,\n    ) -&gt; None:\n        \"\"\"Asynchronous method for adding and updating keys to database.\n\n        Examples:\n            &gt;&gt;&gt; from scruby import Scruby\n            &gt;&gt;&gt; db = Scruby()\n            &gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\n            None\n\n        Args:\n            key: Key name.\n            value: Value of key.\n        \"\"\"\n        # The path to the database cell.\n        leaf_path: Path = await self.get_leaf_path(key)\n        # Write key-value to the database.\n        if await leaf_path.exists():\n            # Add new key or update existing.\n            data_json: bytes = await leaf_path.read_bytes()\n            data: dict = orjson.loads(data_json) or {}\n            data[key] = value\n            await leaf_path.write_bytes(orjson.dumps(data))\n        else:\n            # Add new key to a blank leaf.\n            await leaf_path.write_bytes(data=orjson.dumps({key: value}))\n\n    async def get_key(self, key: str) -&gt; ValueOfKey:\n        \"\"\"Asynchronous method for getting key from database.\n\n        Examples:\n            &gt;&gt;&gt; from scruby import Scruby\n            &gt;&gt;&gt; db = Scruby()\n            &gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\n            None\n            &gt;&gt;&gt; await db.get_key(\"key name\")\n            \"Some text\"\n            &gt;&gt;&gt; await db.get_key(\"key missing\")\n            KeyError\n\n        Args:\n            key: Key name.\n        \"\"\"\n        # The path to the database cell.\n        leaf_path: Path = await self.get_leaf_path(key)\n        # Get value of key.\n        if await leaf_path.exists():\n            data_json: bytes = await leaf_path.read_bytes()\n            data: dict = orjson.loads(data_json) or {}\n            return data[key]\n        raise KeyError()\n\n    async def has_key(self, key: str) -&gt; bool:\n        \"\"\"Asynchronous method for checking presence of  key in database.\n\n        Examples:\n            &gt;&gt;&gt; from scruby import Scruby\n            &gt;&gt;&gt; db = Scruby()\n            &gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\n            None\n            &gt;&gt;&gt; await db.has_key(\"key name\")\n            True\n            &gt;&gt;&gt; await db.has_key(\"key missing\")\n            False\n\n        Args:\n            key: Key name.\n        \"\"\"\n        # The path to the database cell.\n        leaf_path: Path = await self.get_leaf_path(key)\n        # Checking whether there is a key.\n        if await leaf_path.exists():\n            data_json: bytes = await leaf_path.read_bytes()\n            data: dict = orjson.loads(data_json) or {}\n            try:\n                data[key]\n                return True\n            except KeyError:\n                return False\n        return False\n\n    async def delete_key(self, key: str) -&gt; None:\n        \"\"\"Asynchronous method for deleting key from database.\n\n        Examples:\n            &gt;&gt;&gt; from scruby import Scruby\n            &gt;&gt;&gt; db = Scruby()\n            &gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\n            None\n            &gt;&gt;&gt; await db.delete_key(\"key name\")\n            None\n            &gt;&gt;&gt; await db.delete_key(\"key missing\")\n            KeyError\n\n        Args:\n            key: Key name.\n        \"\"\"\n        # The path to the database cell.\n        leaf_path: Path = await self.get_leaf_path(key)\n        # Deleting key.\n        if await leaf_path.exists():\n            data_json: bytes = await leaf_path.read_bytes()\n            data: dict = orjson.loads(data_json) or {}\n            del data[key]\n            await leaf_path.write_bytes(orjson.dumps(data))\n            return\n        raise KeyError()\n\n    async def napalm(self) -&gt; None:\n        \"\"\"Asynchronous method for full database deletion (Arg: db_path).\n\n        Warning:\n            - `Be careful, this will remove all keys.`\n\n        Examples:\n            &gt;&gt;&gt; from scruby import Scruby\n            &gt;&gt;&gt; db = Scruby()\n            &gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\n            None\n            &gt;&gt;&gt; await db.napalm()\n            None\n            &gt;&gt;&gt; await db.napalm()\n            FileNotFoundError\n        \"\"\"\n        await to_thread.run_sync(rmtree, self.__db_path)\n        return\n</code></pre>"},{"location":"pages/db/#scruby.db.Scruby.db_path","title":"<code>db_path</code>  <code>property</code>","text":"<p>Get database name.</p>"},{"location":"pages/db/#scruby.db.Scruby.delete_key","title":"<code>delete_key(key)</code>  <code>async</code>","text":"<p>Asynchronous method for deleting key from database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from scruby import Scruby\n&gt;&gt;&gt; db = Scruby()\n&gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\nNone\n&gt;&gt;&gt; await db.delete_key(\"key name\")\nNone\n&gt;&gt;&gt; await db.delete_key(\"key missing\")\nKeyError\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Key name.</p> required Source code in <code>src\\scruby\\db.py</code> <pre><code>async def delete_key(self, key: str) -&gt; None:\n    \"\"\"Asynchronous method for deleting key from database.\n\n    Examples:\n        &gt;&gt;&gt; from scruby import Scruby\n        &gt;&gt;&gt; db = Scruby()\n        &gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\n        None\n        &gt;&gt;&gt; await db.delete_key(\"key name\")\n        None\n        &gt;&gt;&gt; await db.delete_key(\"key missing\")\n        KeyError\n\n    Args:\n        key: Key name.\n    \"\"\"\n    # The path to the database cell.\n    leaf_path: Path = await self.get_leaf_path(key)\n    # Deleting key.\n    if await leaf_path.exists():\n        data_json: bytes = await leaf_path.read_bytes()\n        data: dict = orjson.loads(data_json) or {}\n        del data[key]\n        await leaf_path.write_bytes(orjson.dumps(data))\n        return\n    raise KeyError()\n</code></pre>"},{"location":"pages/db/#scruby.db.Scruby.get_key","title":"<code>get_key(key)</code>  <code>async</code>","text":"<p>Asynchronous method for getting key from database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from scruby import Scruby\n&gt;&gt;&gt; db = Scruby()\n&gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\nNone\n&gt;&gt;&gt; await db.get_key(\"key name\")\n\"Some text\"\n&gt;&gt;&gt; await db.get_key(\"key missing\")\nKeyError\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Key name.</p> required Source code in <code>src\\scruby\\db.py</code> <pre><code>async def get_key(self, key: str) -&gt; ValueOfKey:\n    \"\"\"Asynchronous method for getting key from database.\n\n    Examples:\n        &gt;&gt;&gt; from scruby import Scruby\n        &gt;&gt;&gt; db = Scruby()\n        &gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\n        None\n        &gt;&gt;&gt; await db.get_key(\"key name\")\n        \"Some text\"\n        &gt;&gt;&gt; await db.get_key(\"key missing\")\n        KeyError\n\n    Args:\n        key: Key name.\n    \"\"\"\n    # The path to the database cell.\n    leaf_path: Path = await self.get_leaf_path(key)\n    # Get value of key.\n    if await leaf_path.exists():\n        data_json: bytes = await leaf_path.read_bytes()\n        data: dict = orjson.loads(data_json) or {}\n        return data[key]\n    raise KeyError()\n</code></pre>"},{"location":"pages/db/#scruby.db.Scruby.get_leaf_path","title":"<code>get_leaf_path(key)</code>  <code>async</code>","text":"<p>Get the path to the database cell by key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Key name.</p> required Source code in <code>src\\scruby\\db.py</code> <pre><code>async def get_leaf_path(self, key: str) -&gt; Path:\n    \"\"\"Get the path to the database cell by key.\n\n    Args:\n        key: Key name.\n    \"\"\"\n    # Key to md5 sum.\n    key_md5: str = hashlib.md5(key.encode(\"utf-8\")).hexdigest()  # noqa: S324\n    # Convert md5 sum in the segment of path.\n    segment_path_md5: str = \"/\".join(list(key_md5))\n    # The path of the branch to the database.\n    branch_path: Path = Path(\n        *(self.__db_path, segment_path_md5),\n    )\n    # If the branch does not exist, need to create it.\n    if not await branch_path.exists():\n        await branch_path.mkdir(parents=True)\n    # The path to the database cell.\n    leaf_path: Path = Path(*(branch_path, \"leaf.json\"))\n    return leaf_path\n</code></pre>"},{"location":"pages/db/#scruby.db.Scruby.has_key","title":"<code>has_key(key)</code>  <code>async</code>","text":"<p>Asynchronous method for checking presence of  key in database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from scruby import Scruby\n&gt;&gt;&gt; db = Scruby()\n&gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\nNone\n&gt;&gt;&gt; await db.has_key(\"key name\")\nTrue\n&gt;&gt;&gt; await db.has_key(\"key missing\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Key name.</p> required Source code in <code>src\\scruby\\db.py</code> <pre><code>async def has_key(self, key: str) -&gt; bool:\n    \"\"\"Asynchronous method for checking presence of  key in database.\n\n    Examples:\n        &gt;&gt;&gt; from scruby import Scruby\n        &gt;&gt;&gt; db = Scruby()\n        &gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\n        None\n        &gt;&gt;&gt; await db.has_key(\"key name\")\n        True\n        &gt;&gt;&gt; await db.has_key(\"key missing\")\n        False\n\n    Args:\n        key: Key name.\n    \"\"\"\n    # The path to the database cell.\n    leaf_path: Path = await self.get_leaf_path(key)\n    # Checking whether there is a key.\n    if await leaf_path.exists():\n        data_json: bytes = await leaf_path.read_bytes()\n        data: dict = orjson.loads(data_json) or {}\n        try:\n            data[key]\n            return True\n        except KeyError:\n            return False\n    return False\n</code></pre>"},{"location":"pages/db/#scruby.db.Scruby.napalm","title":"<code>napalm()</code>  <code>async</code>","text":"<p>Asynchronous method for full database deletion (Arg: db_path).</p> Warning <ul> <li><code>Be careful, this will remove all keys.</code></li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from scruby import Scruby\n&gt;&gt;&gt; db = Scruby()\n&gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\nNone\n&gt;&gt;&gt; await db.napalm()\nNone\n&gt;&gt;&gt; await db.napalm()\nFileNotFoundError\n</code></pre> Source code in <code>src\\scruby\\db.py</code> <pre><code>async def napalm(self) -&gt; None:\n    \"\"\"Asynchronous method for full database deletion (Arg: db_path).\n\n    Warning:\n        - `Be careful, this will remove all keys.`\n\n    Examples:\n        &gt;&gt;&gt; from scruby import Scruby\n        &gt;&gt;&gt; db = Scruby()\n        &gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\n        None\n        &gt;&gt;&gt; await db.napalm()\n        None\n        &gt;&gt;&gt; await db.napalm()\n        FileNotFoundError\n    \"\"\"\n    await to_thread.run_sync(rmtree, self.__db_path)\n    return\n</code></pre>"},{"location":"pages/db/#scruby.db.Scruby.set_key","title":"<code>set_key(key, value)</code>  <code>async</code>","text":"<p>Asynchronous method for adding and updating keys to database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from scruby import Scruby\n&gt;&gt;&gt; db = Scruby()\n&gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\nNone\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Key name.</p> required <code>value</code> <code>ValueOfKey</code> <p>Value of key.</p> required Source code in <code>src\\scruby\\db.py</code> <pre><code>async def set_key(\n    self,\n    key: str,\n    value: ValueOfKey,\n) -&gt; None:\n    \"\"\"Asynchronous method for adding and updating keys to database.\n\n    Examples:\n        &gt;&gt;&gt; from scruby import Scruby\n        &gt;&gt;&gt; db = Scruby()\n        &gt;&gt;&gt; await db.set_key(\"key name\", \"Some text\")\n        None\n\n    Args:\n        key: Key name.\n        value: Value of key.\n    \"\"\"\n    # The path to the database cell.\n    leaf_path: Path = await self.get_leaf_path(key)\n    # Write key-value to the database.\n    if await leaf_path.exists():\n        # Add new key or update existing.\n        data_json: bytes = await leaf_path.read_bytes()\n        data: dict = orjson.loads(data_json) or {}\n        data[key] = value\n        await leaf_path.write_bytes(orjson.dumps(data))\n    else:\n        # Add new key to a blank leaf.\n        await leaf_path.write_bytes(data=orjson.dumps({key: value}))\n</code></pre>"},{"location":"pages/installation/","title":"Installation","text":"<pre><code>uv add scruby\n</code></pre>"},{"location":"pages/usage/","title":"Usage","text":"<pre><code>import anyio\nfrom scruby import Scruby\n\n\nasync def main() -&gt; None:\n    \"\"\"Example.\"\"\"\n\n    db = Scruby()\n    await db.set_key(\"key name\", \"Some text\")\n    await db.get_key(\"key name\")  # =&gt; \"Some text\"\n    await db.get_key(\"key missing\")  # =&gt; KeyError\n    await db.has_key(\"key name\")  # =&gt; True\n    await db.has_key(\"key missing\")  # =&gt; False\n    await db.delete_key(\"key name\")\n    await db.delete_key(\"key missing\")  # =&gt; KeyError\n    # Full database deletion.\n    await db.napalm()\n    await db.napalm()  # =&gt; FileNotFoundError\n\n\nif __name__ == \"__main__\":\n    anyio.run(main)\n</code></pre>"}]}